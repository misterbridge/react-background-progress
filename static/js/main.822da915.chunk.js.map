{"version":3,"sources":["../../dist/index.es.js","App.js","serviceWorker.js","index.js"],"names":["styles","wrapper","root","visible","reactBackgroundProgressfadeIn","half","fill","rotate","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","styleInject","index_es_ReactBackgroundProgress","_ref","progress","animationDuration","className","Math","min","getRotation","rootClasses","push","node_modules_react_default","a","join","transform","concat","transition","propTypes","prop_types_default","number","isRequired","string","defaultProps","index_es","App","_useState","useState","_useState2","Object","slicedToArray","setProgress","useEffect","updateTimeout","setTimeout","newProgress","round","alert","clearTimeout","react_default","position","width","height","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.822da915.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \"@keyframes styles_reactBackgroundProgressfadeIn__1a8wN {\\n  from {\\n    opacity: 0;\\n  }\\n\\n  to {\\n    opacity: 1;\\n  }\\n}\\n\\n.styles_wrapper__3KXDn {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  overflow: hidden;\\n}\\n\\n.styles_root__3WDXs {\\n  /* So the rotation of a rectangle is always visible */\\n  position: absolute;\\n  top: -100vmax;\\n  right: -100vmax;\\n  bottom: -100vmax;\\n  left: -100vmax;\\n  z-index: -1;\\n  opacity: 0;\\n}\\n\\n.styles_root__3WDXs * {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n}\\n\\n.styles_visible__3TqW5 {\\n  animation-name: styles_reactBackgroundProgressfadeIn__1a8wN;\\n  animation-duration: 300ms;\\n  animation-fill-mode: forwards;\\n}\\n\\n.styles_half__31rI2 {\\n  /* 49.99% so there is no hole between the two halves */\\n  clip-path: polygon(49.99% 0%, 100% 0%, 100% 100%, 50% 100%);\\n}\\n\\n.styles_fill__6jfwi {\\n  right: 50%;\\n  background-color: #cfd8dc;\\n}\\n\\n.styles_rotate__14bc0 {\\n  backface-visibility: hidden; /* Fix pixelized drawing; */\\n}\\n\\n.styles_rotate__14bc0:not(.styles_fill__6jfwi) {\\n  transform-origin: center;\\n}\\n\\n.styles_rotate__14bc0.styles_fill__6jfwi {\\n  transform-origin: right;\\n}\\n\";\nvar styles = {\n  \"wrapper\": \"styles_wrapper__3KXDn\",\n  \"root\": \"styles_root__3WDXs\",\n  \"visible\": \"styles_visible__3TqW5\",\n  \"reactBackgroundProgressfadeIn\": \"styles_reactBackgroundProgressfadeIn__1a8wN\",\n  \"half\": \"styles_half__31rI2\",\n  \"fill\": \"styles_fill__6jfwi\",\n  \"rotate\": \"styles_rotate__14bc0\"\n};\nstyleInject(css);\nvar DEFAULT_PROGRESS_ANIMATION_DURATION = 300;\n\nfunction getRotation(progress) {\n  return Math.min(180 * progress, 180);\n}\n\nvar ReactBackgroundProgress = function ReactBackgroundProgress(_ref) {\n  var progress = _ref.progress,\n      animationDuration = _ref.animationDuration,\n      className = _ref.className;\n  var rotate = getRotation(progress);\n  var rootClasses = [styles.root, className]; // Hide if not active at\n\n  if (rotate !== 0) {\n    rootClasses.push(styles.visible);\n  }\n\n  return React.createElement(\"div\", {\n    className: styles.wrapper\n  }, React.createElement(\"div\", {\n    className: rootClasses.join(' ')\n  }, React.createElement(\"div\", {\n    className: styles.half\n  }, React.createElement(\"div\", {\n    className: [styles.fill, styles.rotate].join(' '),\n    style: {\n      transform: \"rotate(\".concat(rotate, \"deg)\"),\n      transition: \"transform \".concat(animationDuration, \"ms linear\")\n    }\n  })), React.createElement(\"div\", {\n    className: [styles.half, styles.rotate].join(' '),\n    style: {\n      transform: \"rotate(\".concat(rotate, \"deg)\"),\n      transition: \"transform \".concat(animationDuration, \"ms linear\")\n    }\n  }, React.createElement(\"div\", {\n    className: [styles.fill, styles.rotate].join(' '),\n    style: {\n      transform: \"rotate(\".concat(rotate, \"deg)\"),\n      transition: \"transform \".concat(animationDuration, \"ms linear\")\n    }\n  }))));\n};\n\nReactBackgroundProgress.propTypes = {\n  progress: PropTypes.number.isRequired,\n  // 0 to 1\n  // Animation needs an additionnal X ms to reach progress value\n  animationDuration: PropTypes.number,\n  // Styles\n  className: PropTypes.string\n};\nReactBackgroundProgress.defaultProps = {\n  animationDuration: DEFAULT_PROGRESS_ANIMATION_DURATION,\n  className: ''\n};\nexport default ReactBackgroundProgress;\nexport { DEFAULT_PROGRESS_ANIMATION_DURATION };","import React, { useState, useEffect } from 'react';\n\nimport ReactBackgroundProgress, {\n  DEFAULT_PROGRESS_ANIMATION_DURATION,\n} from 'react-background-progress';\n\nconst App = () => {\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    let updateTimeout;\n    if (progress < 1) {\n      updateTimeout = setTimeout(() => {\n        const newProgress = Math.round(Math.min(progress + 0.1, 1) * 10) / 10;\n        setProgress(newProgress);\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        alert('Done !');\n      }, DEFAULT_PROGRESS_ANIMATION_DURATION);\n    }\n    return () => {\n      clearTimeout(updateTimeout);\n    };\n  }, [progress]);\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}\n    >\n      <ReactBackgroundProgress progress={progress} />\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}